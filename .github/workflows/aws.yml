# This workflow will build and push a new container image to Amazon ECR,
# and then will deploy a new task definition to Amazon ECS, when there is a push to the "main" branch.
#
# To use this workflow, you will need to complete the following set-up steps:
#
# 1. Create an ECR repository to store your images.
#    For example: `aws ecr create-repository --repository-name my-ecr-repo --region us-east-2`.
#    Replace the value of the `ECR_REPOSITORY` environment variable in the workflow below with your repository's name.
#    Replace the value of the `AWS_REGION` environment variable in the workflow below with your repository's region.
#
# 2. Create an ECS task definition, an ECS cluster, and an ECS service.
#    For example, follow the Getting Started guide on the ECS console:
#      https://us-east-2.console.aws.amazon.com/ecs/home?region=us-east-2#/firstRun
#    Replace the value of the `ECS_SERVICE` environment variable in the workflow below with the name you set for the Amazon ECS service.
#    Replace the value of the `ECS_CLUSTER` environment variable in the workflow below with the name you set for the cluster.
#
# 3. Store your ECS task definition as a JSON file in your repository.
#    The format should follow the output of `aws ecs register-task-definition --generate-cli-skeleton`.
#    Replace the value of the `ECS_TASK_DEFINITION` environment variable in the workflow below with the path to the JSON file.
#    Replace the value of the `CONTAINER_NAME` environment variable in the workflow below with the name of the container
#    in the `containerDefinitions` section of the task definition.
#
# 4. Store an IAM user access key in GitHub Actions secrets named `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`.
#    See the documentation for each action used below for the recommended IAM policies for this IAM user,
#    and best practices on handling the access key credentials.

# name: Workflow의 이름 지정
name: Deploy to Amazon ECS -> main 브랜치에 Push 또는 Pull Request가 올 경우 실행되는 "Deploy to Amazon ECS"라는 이름을 갖는 Workflow

# on: Event에 대한 작성 -> 어떤 조건에 Workflow를 Trigger 시킬지
# push(Branch or Tag), pull_request, schedule 옵션이 있음
# 단일 Event를 사용할 수도 있고 array로 작성할 수도 있음
on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

# 환경변수 설정
env:
  ACTIVE_PROFILE: ${{ github.ref == 'refs/heads/master' && 'production' || 'develop' }} # Spring Boot Active Profile
  AWS_REGION: ap-northeast-2                   # set this to your preferred AWS region, e.g. us-west-1
  ECR_REPOSITORY: ${{ github.ref == 'refs/heads/master' && 'production-example-application' || 'develop-example-application' }}           # set this to your Amazon ECR repository name
  ECS_SERVICE: ${{ github.ref == 'refs/heads/master' && 'production-example-application' || 'develop-example-application' }}                 # set this to your Amazon ECS service name
  ECS_CLUSTER: ${{ github.ref == 'refs/heads/master' && 'production-example-application' || 'develop-example-application' }}                 # set this to your Amazon ECS cluster name
  ECS_TASK_DEFINITION: ${{ github.ref == 'refs/heads/master' && 'task-definition-production.json' || 'task-definition-develop.json' }} # set this to the path to your Amazon ECS task definition
                                               # file, e.g. .aws/task-definition.json
  CONTAINER_NAME: my_container           # set this to the name of the container in the
                                               # containerDefinitions section of your task definition

permissions:
  contents: read

# Workflow는 다양한 Job으로 구성되며 여러 Job이 있을 경우 default로 병렬 실행함
# 아래는 Build & Deploy라는 job을 생성하고 그 아래에 6개의 step이 존재하는 구조
# runs-on은 어떤 OS에서 실행될지 지정
# steps의 uses는 미리 만들어진 액션이 있을 때 어떤 액션을 사용할지 지정함
jobs:
  job:
    name: Build & Deploy
    runs-on: ubuntu-latest
    environment: production

    # 체크아웃
    steps:
    - name: Checkout
      uses: actions/checkout@v3

    # DB 설정
    - name: Set Up MySQL
      uses: samin/mysql-action@v1
      with:
        host port: 3306
        container port: 3306
        character set server: 'utf8'
        mysql database: 'soldout_db'
        mysql password: ${{ secrets.DB_PASSWORD }}
        mysql user: 'admin'
        mysql root password: ${{ secrets.ROOT_PASSWORD }}

    
    # JDK 설정
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin' # ???

    # Gradle clean build
    - name: Build with Gradle
      uses: gradle/gradle-build-action@67421db6bd0bf253fb4bd25b31ebb98943c375e1
      with:
        arguments: clean build
      env:
        SPRING_PROFILES_ACTIVE: ${{ env.ACTIVE_PROFILE }}

    # AWS 자격 인증 설정
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    # ECR 로그인
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    # ECR에 도커 이미지 Push
    - name: Build, tag, and push image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: latest
      run: |
        # Build a docker container and
        # push it to ECR so that it can
        # be deployed to ECS.
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_OUTPUT
    
    # ECS Task 정의
    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION }}
        container-name: ${{ env.CONTAINER_NAME }}
        image: ${{ steps.build-image.outputs.image }}
    
    # ECS Task Push
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ steps.task-def.outputs.task-definition }}
        service: ${{ env.ECS_SERVICE }}
        cluster: ${{ env.ECS_CLUSTER }}
        wait-for-service-stability: true
